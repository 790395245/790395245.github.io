import{_ as a,c as t,G as l,b as i}from"./chunks/framework.DULpp8DO.js";const o=JSON.parse('{"title":"高效团队协作的 Git 工作流模型","description":"高效团队协作的 Git 工作流模型","frontmatter":{"title":"高效团队协作的 Git 工作流模型","date":"2025-03-14T00:00:00.000Z","categories":["技术分享"],"tags":["Git","工作流","团队协作"],"description":"高效团队协作的 Git 工作流模型","articleGPT":"本文介绍了三种Git工作流模型：Git flow强调版本发布，适用于严格质量控制；GitHub flow简单高效，适合快速迭代；GitLab flow结合两者优点，但处理hotfix能力不足。当前主流工作流基于GitLab flow改进，增强hotfix处理，同时保持敏捷开发，更适应现代项目需求。","top":null,"share":true,"delete":false,"cover":"https://cdn.rz15.cn/uploads/2025/05/企业微信截图_17465191101678.png","head":[["link",{"rel":"canonical","href":"https://ruo.ge/posts/2025-03/20250314"}]]},"headers":[],"relativePath":"posts/2025-03/20250314.md","filePath":"posts/2025-03/20250314.md","lastUpdated":1758855969000}');const e=a({name:"posts/2025-03/20250314.md"},[["render",function(a,o,e,r,s,p){return i(),t("div",null,o[0]||(o[0]=[l('<p>在使用 Git 的过程中如果没有清晰流程和规划，每个人都提交一堆杂乱无章的 commit,项目很快就会变得难以协调和维护。协作必须有一个规范的工作流程，让大家有效地合作，使得项目井井有条地发展下去。</p><p>2010年，Vincent Driessen 为了解决这个问题提出了 A Successful Git Branching Model。它是一种以功能分支为中心的流程，适用于有规律的发布周期和严格的质量控制。</p><p><a class="img-fancybox" href="https://cdn.rz15.cn/uploads/2025/03/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17419324108250.png" data-fancybox="gallery" data-caption="git-flow"><img class="post-img" src="https://cdn.rz15.cn/uploads/2025/03/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17419324108250.png" alt="git-flow" loading="lazy"><span class="post-img-tip">git-flow</span></a></p><p><a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noreferrer">A Successful Git Branching Model (https://nvie.com/posts/a-successful-git-branching-model/) </a></p><h3 id="主要分支" tabindex="-1">主要分支 <a class="header-anchor" href="#主要分支" aria-label="Permalink to &quot;主要分支&quot;">​</a></h3><ul><li><strong>master</strong>: 主分支，用于存放正式发布的版本</li><li><strong>develop</strong>: 开发分支，用于日常开发</li></ul><h3 id="辅助分支" tabindex="-1">辅助分支 <a class="header-anchor" href="#辅助分支" aria-label="Permalink to &quot;辅助分支&quot;">​</a></h3><ul><li><p><strong>feature</strong>: 功能分支，用于开发新功能</p><ul><li>从 develop 分支创建</li><li>完成后合并回 develop 分支</li></ul></li><li><p><strong>release</strong>: 发布分支，用于版本发布前的准备工作</p><ul><li>从 develop 分支创建</li><li>完成后合并到 master 和 develop 分支</li></ul></li><li><p><strong>hotfix</strong>: 热修复分支，用于修复生产环境中的紧急问题</p><ul><li>从 master 分支创建</li><li>完成后合并到 master 和 develop 分支</li></ul></li></ul><h3 id="基本工作流程" tabindex="-1">基本工作流程 <a class="header-anchor" href="#基本工作流程" aria-label="Permalink to &quot;基本工作流程&quot;">​</a></h3><ol><li>从 develop 分支创建 feature 分支进行新功能开发</li><li>完成功能开发后，将 feature 分支合并回 develop</li><li>从 develop 创建 release 分支准备发布</li><li>发布准备完成后，将 release 分支合并到 master 和 develop</li><li>如果生产环境出现问题，从 master 创建 hotfix 分支进行修复</li><li>修复完成后，将 hotfix 分支合并到 master 和 develop</li></ol><p><a class="img-fancybox" href="https://cdn.rz15.cn/uploads/2025/05/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17465191101678.png" data-fancybox="gallery" data-caption="git-flow"><img class="post-img" src="https://cdn.rz15.cn/uploads/2025/05/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17465191101678.png" alt="git-flow" loading="lazy"><span class="post-img-tip">git-flow</span></a></p><h3 id="git-flow-的优点和缺点" tabindex="-1">Git flow 的优点和缺点 <a class="header-anchor" href="#git-flow-的优点和缺点" aria-label="Permalink to &quot;Git flow 的优点和缺点&quot;">​</a></h3><p>Git flow的优点是清晰可控，缺点是相对复杂，需要同时维护两个长期分支。</p><p>并且，这个模式是基于”版本发布”的，目标是一段时间以后产出一个新版本。但是，如今的项目大多是”持续发布”，需要快速迭代，响应用户需求。这时，master分支和develop分支的差别不大，没必要维护两个长期分支。</p><h1 id="敏捷工作流-——-github-flow" tabindex="-1">敏捷工作流 —— GitHub flow <a class="header-anchor" href="#敏捷工作流-——-github-flow" aria-label="Permalink to &quot;敏捷工作流 —— GitHub flow&quot;">​</a></h1><p>GitHub flow 是由 GitHub 的创始人之一，Chris Wanstrath 在2011年提出的。是一种以持续集成为核心的工作流程，适用于快速迭代和小规模团队。</p><p>官方文档：<a href="https://docs.github.com/zh/get-started/using-github/github-flow" target="_blank" rel="noreferrer">GitHub flow</a></p><h3 id="基本工作流程-1" tabindex="-1">基本工作流程 <a class="header-anchor" href="#基本工作流程-1" aria-label="Permalink to &quot;基本工作流程&quot;">​</a></h3><ol><li>根据需求，从master拉出新分支，不区分功能分支或补丁分支。</li><li>新分支开发完成后，或者需要讨论的时候，就向master发起一个pull request（简称PR）。</li><li>Pull Request既是一个通知，让别人注意到你的请求，又是一种对话机制，大家一起评审和讨论你的代码。对话过程中，你还可以不断提交代码。</li><li>你的Pull Request被接受，合并进master，重新部署后，原来你拉出来的那个分支就被删除。（先部署再合并也可。）</li></ol><p><a class="img-fancybox" href="https://cdn.rz15.cn/uploads/2025/03/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17419354645447.png" data-fancybox="gallery" data-caption="github-flow"><img class="post-img" src="https://cdn.rz15.cn/uploads/2025/03/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17419354645447.png" alt="github-flow" loading="lazy"><span class="post-img-tip">github-flow</span></a></p><h3 id="github-flow-的优点和缺点" tabindex="-1">GitHub flow 的优点和缺点 <a class="header-anchor" href="#github-flow-的优点和缺点" aria-label="Permalink to &quot;GitHub flow 的优点和缺点&quot;">​</a></h3><p>GitHub flow的优点是简单，不需要维护长期分支，适合快速迭代。缺点是缺乏版本控制，不适合有规律的发布周期。</p><h1 id="gitlab-flow-取两家之长" tabindex="-1">GitLab flow 取两家之长 <a class="header-anchor" href="#gitlab-flow-取两家之长" aria-label="Permalink to &quot;GitLab flow 取两家之长&quot;">​</a></h1><p>GitLab flow 是 GitLab 的创始人之一，Dmitriy Zaporozhets 在2014年提出的。</p><p><a href="https://gitlab.cn/docs/jh/topics/gitlab_flow.html" target="_blank" rel="noreferrer">GitLab flow</a></p><p>Gitlab flow 的最大原则叫做&quot;上游优先&quot;（upsteam first），即只存在一个主分支master，它是所有其他分支的&quot;上游&quot;。只有上游分支采纳的代码变化，才能应用到其他分支。</p><h3 id="基本工作流程-2" tabindex="-1">基本工作流程 <a class="header-anchor" href="#基本工作流程-2" aria-label="Permalink to &quot;基本工作流程&quot;">​</a></h3><ol><li>所有开发人员从master创建新分支，不区分功能分支或补丁分支。</li><li>master分支中拉出pre-production分支，用于预发布测试。</li><li>预发布测试完成后，从pre-production分支拉出production分支，用于生产环境。</li></ol><p>开发分支是预发分支的”上游”，预发分支又是生产分支的”上游”。代码的变化，必须由”上游”向”下游”发展。比如，生产环境出现了bug，这时就要新建一个功能分支，先把它合并到master，确认没有问题，再拉到pre-production，这一步也没有问题，才进入production。</p><p><a class="img-fancybox" href="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015122306.png" data-fancybox="gallery" data-caption="gitlab-flow"><img class="post-img" src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015122306.png" alt="gitlab-flow" loading="lazy"><span class="post-img-tip">gitlab-flow</span></a></p><h3 id="gitlab-flow-的优点和缺点" tabindex="-1">GitLab flow 的优点和缺点 <a class="header-anchor" href="#gitlab-flow-的优点和缺点" aria-label="Permalink to &quot;GitLab flow 的优点和缺点&quot;">​</a></h3><p>GitLab flow既适用于版本发布，也适用于持续发布，同时符合敏捷开发。</p><p>问题在于 GitLab flow 上游优先的原则导致处理hotfix的能力不足。</p><h1 id="当下主流的团队开发工作流" tabindex="-1">当下主流的团队开发工作流 <a class="header-anchor" href="#当下主流的团队开发工作流" aria-label="Permalink to &quot;当下主流的团队开发工作流&quot;">​</a></h1><p>在GitLab flow的基础上，提升处理hotfix的能力，同时保持敏捷开发。</p><h3 id="基于-gitlab-flow-的改进" tabindex="-1">基于 GitLab flow 的改进 <a class="header-anchor" href="#基于-gitlab-flow-的改进" aria-label="Permalink to &quot;基于 GitLab flow 的改进&quot;">​</a></h3><ul><li>pro-production分支测试发现bug</li></ul><p>1.在pro-production分支提交修复分支 2.所有bug修复后拉出production分支 3.合并到master分支。</p><ul><li>production分支出现恶性bug</li></ul><p>1.直接从production分支拉出hotfix分支 2.修复后合并到master、pre-production分支。 3.所有开发人员同步master分支修改</p><p><a class="img-fancybox" href="https://cdn.rz15.cn/uploads/2025/03/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17419409104465.png" data-fancybox="gallery" data-caption="git-flow"><img class="post-img" src="https://cdn.rz15.cn/uploads/2025/03/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17419409104465.png" alt="git-flow" loading="lazy"><span class="post-img-tip">git-flow</span></a></p>',41)]))}]]);export{o as __pageData,e as default};
