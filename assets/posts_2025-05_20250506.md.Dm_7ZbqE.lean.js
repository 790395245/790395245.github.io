import{_ as a,c as t,G as l,b as o}from"./chunks/framework.DULpp8DO.js";const r=JSON.parse('{"title":"软件架构设计","description":"软件架构设计","frontmatter":{"title":"软件架构设计","date":"2025-05-6","categories":["技术分享"],"tags":["分层架构","架构设计师","团队协作","开发方法论"],"description":"软件架构设计","articleGPT":"本文将深入探讨软件架构设计的核心原则、实施方法和最佳实践，帮助开发团队构建可维护、可扩展的软件系统。","top":null,"share":true,"delete":false,"cover":"https://cdn.rz15.cn/uploads/2025/05/微信图片_20250506132540.png","head":[["link",{"rel":"canonical","href":"https://ruo.ge/posts/2025-05/20250506"}]]},"headers":[],"relativePath":"posts/2025-05/20250506.md","filePath":"posts/2025-05/20250506.md","lastUpdated":1758855969000}');const e=a({name:"posts/2025-05/20250506.md"},[["render",function(a,r,e,s,n,i){return o(),t("div",null,r[0]||(r[0]=[l('<h1 id="🏗️-软件架构设计" tabindex="-1">🏗️ 软件架构设计 <a class="header-anchor" href="#🏗️-软件架构设计" aria-label="Permalink to &quot;🏗️ 软件架构设计&quot;">​</a></h1><blockquote><p>合适的架构是软件成功的最重要因素之一。大型软件公司通常有专门的架构师职位（architect），只有资深程序员才可以担任。</p></blockquote><h2 id="⚠️-不良架构设计" tabindex="-1">⚠️ 不良架构设计 <a class="header-anchor" href="#⚠️-不良架构设计" aria-label="Permalink to &quot;⚠️ 不良架构设计&quot;">​</a></h2><p><a class="img-fancybox" href="https://cdn.rz15.cn/uploads/2025/05/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17478135462771.png" data-fancybox="gallery" data-caption="不良架构设计"><img class="post-img" src="https://cdn.rz15.cn/uploads/2025/05/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17478135462771.png" alt="不良架构设计" loading="lazy"><span class="post-img-tip">不良架构设计</span></a></p><h2 id="✨-优秀的架构设计" tabindex="-1">✨ 优秀的架构设计 <a class="header-anchor" href="#✨-优秀的架构设计" aria-label="Permalink to &quot;✨ 优秀的架构设计&quot;">​</a></h2><p><a class="img-fancybox" href="https://cdn.rz15.cn/uploads/2025/05/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17478133789617.png" data-fancybox="gallery" data-caption="优秀架构设计"><img class="post-img" src="https://cdn.rz15.cn/uploads/2025/05/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17478133789617.png" alt="优秀架构设计" loading="lazy"><span class="post-img-tip">优秀架构设计</span></a></p><h2 id="💎-程序架构黄金法则-高内聚低耦合" tabindex="-1">💎 程序架构黄金法则-高内聚低耦合 <a class="header-anchor" href="#💎-程序架构黄金法则-高内聚低耦合" aria-label="Permalink to &quot;💎 程序架构黄金法则-高内聚低耦合&quot;">​</a></h2><blockquote><p>同一个模块内的各个元素之间要高度紧密，但是各个模块之间的相互依存度却要不那么紧密。</p></blockquote><h3 id="📝-实际案例" tabindex="-1">📝 实际案例 <a class="header-anchor" href="#📝-实际案例" aria-label="Permalink to &quot;📝 实际案例&quot;">​</a></h3><ol><li><p><strong>数据获取方式变更</strong></p><ul><li>IT提供的数据获取方式由SQL语句改为API调用</li><li>全公司多个部门通过大半年时间才将所有服务的适配</li></ul></li><li><p><strong>云迁移困境</strong></p><ul><li>自动化从本地迁移到弹性云</li><li>从弹性云又迁回本地</li><li>两次迁移都花费了大量时间</li></ul></li><li><p><strong>业务逻辑优化难题</strong></p><ul><li>自动化中牵扯到业务逻辑的优化和改动很难进行</li><li>因为牵一发而动全身</li></ul></li></ol><p><a class="img-fancybox" href="https://cdn.rz15.cn/uploads/2025/05/jieou.gif" data-fancybox="gallery" data-caption="技术解耦"><img class="post-img" src="https://cdn.rz15.cn/uploads/2025/05/jieou.gif" alt="技术解耦" loading="lazy"><span class="post-img-tip">技术解耦</span></a></p><h3 id="🎯-技术解耦的好处" tabindex="-1">🎯 技术解耦的好处 <a class="header-anchor" href="#🎯-技术解耦的好处" aria-label="Permalink to &quot;🎯 技术解耦的好处&quot;">​</a></h3><ul><li>🔄 技术选型更加灵活</li><li>⬆️ 技术升级更加方便</li><li>🔁 技术栈替换更加容易</li></ul><h2 id="🏛️-常见的软件架构" tabindex="-1">🏛️ 常见的软件架构 <a class="header-anchor" href="#🏛️-常见的软件架构" aria-label="Permalink to &quot;🏛️ 常见的软件架构&quot;">​</a></h2><h3 id="_1️⃣-分层架构-layered-architecture" tabindex="-1">1️⃣ 分层架构(Layered Architecture) <a class="header-anchor" href="#_1️⃣-分层架构-layered-architecture" aria-label="Permalink to &quot;1️⃣ 分层架构(Layered Architecture)&quot;">​</a></h3><blockquote><p>这种架构将软件分成若干个水平层，每一层都有清晰的角色和分工，不需要知道其他层的细节。层与层之间通过接口通信。</p></blockquote><p><a class="img-fancybox" href="https://cdn.rz15.cn/uploads/2025/05/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17479053492589.png" data-fancybox="gallery" data-caption="分层架构"><img class="post-img" src="https://cdn.rz15.cn/uploads/2025/05/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17479053492589.png" alt="分层架构" loading="lazy"><span class="post-img-tip">分层架构</span></a></p><h4 id="📚-常见的四层架构" tabindex="-1">📚 常见的四层架构 <a class="header-anchor" href="#📚-常见的四层架构" aria-label="Permalink to &quot;📚 常见的四层架构&quot;">​</a></h4><div class="table-container"><table><thead><tr><th>层级</th><th>职责</th></tr></thead><tbody><tr><td><strong>表现层</strong></td><td>用户交互</td></tr><tr><td><strong>应用层</strong></td><td>协调业务流程</td></tr><tr><td><strong>领域层</strong></td><td>核心业务逻辑</td></tr><tr><td><strong>基础设施层</strong></td><td>提供技术支持</td></tr></tbody></table></div><blockquote><p>用户的请求将依次通过这四层的处理，不能跳过其中任何一层。</p></blockquote><h4 id="💪-分层架构的主要优点" tabindex="-1">💪 分层架构的主要优点 <a class="header-anchor" href="#💪-分层架构的主要优点" aria-label="Permalink to &quot;💪 分层架构的主要优点&quot;">​</a></h4><ul><li><strong>可维护性</strong>：每个层次都有自己的职责，使得系统的各个部分能够独立开发和维护，降低了系统的维护成本。</li><li><strong>可扩展性</strong>：每个层次都可以根据需要进行扩展，而不会影响到其他层次的功能和实现。</li><li><strong>可重用性</strong>：每个层次都可以被其他系统或模块重用，提高代码复用率。</li><li><strong>清晰易懂</strong>：每个层次的职责和功能明确，降低了系统设计和开发的难度。</li></ul><h3 id="_2️⃣-mvc架构-model-view-controller" tabindex="-1">2️⃣ MVC架构（Model-View-Controller） <a class="header-anchor" href="#_2️⃣-mvc架构-model-view-controller" aria-label="Permalink to &quot;2️⃣ MVC架构（Model-View-Controller）&quot;">​</a></h3><blockquote><p>MVC是一种经典的分层架构，通常用于Web开发。</p></blockquote><h4 id="🎯-三个核心层次" tabindex="-1">🎯 三个核心层次 <a class="header-anchor" href="#🎯-三个核心层次" aria-label="Permalink to &quot;🎯 三个核心层次&quot;">​</a></h4><div class="table-container"><table><thead><tr><th>组件</th><th>职责</th></tr></thead><tbody><tr><td><strong>模型(Model)</strong></td><td>负责数据和业务逻辑</td></tr><tr><td><strong>视图(View)</strong></td><td>负责用户界面</td></tr><tr><td><strong>控制器(Controller)</strong></td><td>负责协调业务流程</td></tr></tbody></table></div><p><a class="img-fancybox" href="https://cdn.rz15.cn/uploads/2025/05/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17479059131248.png" data-fancybox="gallery" data-caption="MVC架构"><img class="post-img" src="https://cdn.rz15.cn/uploads/2025/05/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17479059131248.png" alt="MVC架构" loading="lazy"><span class="post-img-tip">MVC架构</span></a></p><h3 id="_3️⃣-六边形架构-hexagonal-architecture" tabindex="-1">3️⃣ 六边形架构（Hexagonal Architecture） <a class="header-anchor" href="#_3️⃣-六边形架构-hexagonal-architecture" aria-label="Permalink to &quot;3️⃣ 六边形架构（Hexagonal Architecture）&quot;">​</a></h3><blockquote><p>六边形架构的核心是业务逻辑，通过不同的适配器，让应用程序能够以一致的方式被用户、程序、自动化测试、批处理脚本所驱动，而且能够让应用程序的边界更加清晰。</p></blockquote><p>适用于多平台部署、与多种外部系统集成的项目。</p><p><a class="img-fancybox" href="https://cdn.rz15.cn/uploads/2025/05/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17479067172165.png" data-fancybox="gallery" data-caption="六边形架构"><img class="post-img" src="https://cdn.rz15.cn/uploads/2025/05/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17479067172165.png" alt="六边形架构" loading="lazy"><span class="post-img-tip">六边形架构</span></a></p><h2 id="📝-总结" tabindex="-1">📝 总结 <a class="header-anchor" href="#📝-总结" aria-label="Permalink to &quot;📝 总结&quot;">​</a></h2><ol><li><p>🎯 <strong>实用优先</strong>：架构设计应该服务于实际功能需求，不要过度设计。与其花大量时间在完美的架构上，不如先实现核心功能，让系统先跑起来。一个能用的简单架构，胜过永远停留在纸上的完美架构。</p></li><li><p>🔄 <strong>灵活变通</strong>：不必严格遵循已有传统架构，只需遵循高内聚低耦合的原则。</p></li></ol><p><a class="img-fancybox" href="https://cdn.rz15.cn/uploads/2025/05/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17479072952968.png" data-fancybox="gallery" data-caption="编年史"><img class="post-img" src="https://cdn.rz15.cn/uploads/2025/05/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17479072952968.png" alt="编年史" loading="lazy"><span class="post-img-tip">编年史</span></a></p>',34)]))}]]);export{r as __pageData,e as default};
